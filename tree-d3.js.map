{"version":3,"file":"tree-d3.js","sources":["../../../home/runner/work/metastanza/metastanza/stanzas/tree-d3/index.js"],"sourcesContent":["import Stanza from \"togostanza/stanza\";\nimport * as d3 from \"d3\";\nimport loadData from \"togostanza-utils/load-data\";\nimport ToolTip from \"@/lib/ToolTip\";\nimport { getColorSeries } from \"@/lib/ColorGenerator\";\nimport {\n  downloadSvgMenuItem,\n  downloadPngMenuItem,\n  downloadJSONMenuItem,\n  downloadCSVMenuItem,\n  downloadTSVMenuItem,\n  appendCustomCss,\n} from \"togostanza-utils\";\n\n//Declaring constants\nconst ASCENDING = \"ascending\",\n  DESCENDING = \"descending\",\n  HORIZONTAL = \"horizontal\",\n  VERTICAL = \"vertical\",\n  RADIAL = \"radial\",\n  TRANSLUCENT = \"translucent\",\n  MULTIPLY = \"multiply\",\n  SCREEN = \"screen\";\n\nexport default class Tree extends Stanza {\n  //Stanza download menu contents\n  menu() {\n    return [\n      downloadSvgMenuItem(this, \"tree\"),\n      downloadPngMenuItem(this, \"tree\"),\n      downloadJSONMenuItem(this, \"tree\", this._data),\n      downloadCSVMenuItem(this, \"tree\", this._data),\n      downloadTSVMenuItem(this, \"tree\", this._data),\n    ];\n  }\n\n  async render() {\n    this.renderTemplate({\n      template: \"stanza.html.hbs\",\n    });\n\n    const root = this.root.querySelector(\"main\");\n    const el = this.root.getElementById(\"tree-d3\");\n\n    //Define from params\n    const values = await loadData(\n      this.params[\"data-url\"],\n      this.params[\"data-type\"],\n      root\n    );\n    this._data = values;\n\n    appendCustomCss(this, this.params[\"misc-custom_css_url\"]);\n    const width = parseInt(this.params[\"width\"]),\n      height = parseInt(this.params[\"height\"]),\n      sortKey = this.params[\"sort-key\"],\n      sortOrder = this.params[\"sort-order\"],\n      isLeafNodesAlign = this.params[\"graph-align_leaf_nodes\"],\n      layout = this.params[\"layout\"],\n      nodeKey = this.params[\"node-label-key\"],\n      labelMargin = this.params[\"node-label-margin\"],\n      sizeKey = this.params[\"node-size-key\"],\n      minRadius = this.params[\"node-size-min\"] / 2,\n      maxRadius = this.params[\"node-size-max\"] / 2,\n      aveRadius = (minRadius + maxRadius) / 2,\n      colorKey = this.params[\"color-key\"],\n      colorGroup = this.params[\"color-group\"],\n      colorMode = this.params[\"color-blend\"];\n\n    let colorModeProperty, colorModeValue;\n    switch (colorMode) {\n      case TRANSLUCENT:\n        colorModeProperty = \"opacity\";\n        colorModeValue = \"0.5\";\n        break;\n      case MULTIPLY:\n        colorModeProperty = \"mix-blend-mode\";\n        colorModeValue = \"multiply\";\n        break;\n      case SCREEN:\n        colorModeProperty = \"mix-blend-mode\";\n        colorModeValue = \"screen\";\n        break;\n      default:\n        break;\n    }\n\n    const tooltipKey = this.params[\"tooltips-data_key\"];\n    const showToolTips =\n      !!tooltipKey && values.some((item) => item[tooltipKey]);\n    this.tooltip = new ToolTip();\n    root.append(this.tooltip);\n\n    //Sorting by user keywords\n    const orderSym = Symbol(\"order\");\n    values.forEach((value, index) => {\n      value[orderSym] = index;\n    });\n\n    const reorder = (a, b) => {\n      if (a.data[sortKey] && b.data[sortKey]) {\n        switch (sortOrder) {\n          case ASCENDING:\n            return a.data[sortKey] > b.data[sortKey] ? 1 : -1;\n          case DESCENDING:\n            return a.data[sortKey] > b.data[sortKey] ? -1 : 1;\n        }\n      } else {\n        if (sortOrder === DESCENDING) {\n          return b.data[orderSym] - a.data[orderSym];\n        }\n      }\n    };\n\n    //Hierarchize data\n    const treeRoot = d3\n      .stratify()\n      .parentId((d) => d.parent)(values)\n      .sort(reorder);\n\n    const treeDescendants = treeRoot.descendants();\n    const data = treeDescendants.slice(1);\n\n    //Setting node size\n    const nodeSizeMin = d3.min(data, (d) => d.data[sizeKey]);\n    const nodeSizeMax = d3.max(data, (d) => d.data[sizeKey]);\n\n    const d3RadiusScale = d3\n      .scaleSqrt()\n      .domain([nodeSizeMin, nodeSizeMax])\n      .range([minRadius, maxRadius]);\n\n    const nodeRadius = (size) => {\n      return size ? d3RadiusScale(size) : d3RadiusScale(nodeSizeMin);\n    };\n\n    //Toggle display/hide of children\n    const toggle = (d) => {\n      if (d.children) {\n        d._children = d.children;\n        d.children = null;\n      } else {\n        d.children = d._children;\n        d._children = null;\n      }\n    };\n\n    //Setting color scale\n    const togostanzaColors = getColorSeries(this);\n    const defaultColor = togostanzaColors[0];\n    const groupArray = [];\n    treeDescendants.forEach((d) =>\n      d.data[colorGroup] ? groupArray.push(d.data[colorGroup]) : \"\"\n    );\n\n    const groupColor = d3\n      .scaleOrdinal()\n      .domain(groupArray)\n      .range(togostanzaColors.slice(1, 6));\n\n    const setColor = (d) => {\n      if (d.data[colorKey]) {\n        return d.data[colorKey];\n      } else {\n        return d.data[colorGroup]\n          ? groupColor(d.data[colorGroup])\n          : defaultColor;\n      }\n    };\n\n    //Setting svg area\n    const svg = d3\n      .select(el)\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    //Get width of root label\n    const rootGroup = svg\n      .append(\"text\")\n      .text(treeDescendants[0].data[nodeKey] || \"\");\n    const rootLabelWidth = rootGroup.node().getBBox().width;\n    rootGroup.remove();\n\n    //Get width of the largest label at the lowest level\n    const maxDepth = d3.max(data, (d) => d.depth);\n    const labels = [];\n    for (const n of data) {\n      n.depth === maxDepth ? labels.push(n.data[nodeKey] || \"\") : \"\";\n    }\n    const maxLabelGroup = svg.append(\"g\");\n    maxLabelGroup\n      .selectAll(\"text\")\n      .data(labels)\n      .enter()\n      .append(\"text\")\n      .text((d) => d);\n    const maxLabelWidth = maxLabelGroup.node().getBBox().width;\n    maxLabelGroup.remove();\n\n    //Create each group\n    const g = svg.append(\"g\");\n    const gCircles = g.append(\"g\").attr(\"class\", \"circles\");\n    const gLabels = g.append(\"g\").attr(\"class\", \"labels\");\n\n    //Draw function\n    const draw = (\n      margin = {\n        top: 0,\n        right: maxLabelWidth + labelMargin,\n        bottom: 0,\n        left: rootLabelWidth + labelMargin,\n      }\n    ) => {\n      //Error handling\n      switch (layout) {\n        case HORIZONTAL:\n          if (width - margin.right - margin.left < 0) {\n            el.innerHTML = \"<p>width is too small!</p>\";\n            throw new Error(\"width is too small!\");\n          }\n          break;\n        case VERTICAL:\n          if (height - margin.left - margin.right < 0) {\n            el.innerHTML = \"<p>height is too small!</p>\";\n            throw new Error(\"height is too small!\");\n          }\n          break;\n      }\n      if (\n        Math.max(maxRadius, minRadius) * 2 >= width ||\n        Math.max(maxRadius, minRadius) * 2 >= height\n      ) {\n        el.innerHTML = \"<p>node size is too big for width and height!</p>\";\n        throw new Error(\"node size is too big for width and height!\");\n      }\n\n      //Movement of drawing position\n      g.attr(\"transform\", () => {\n        switch (layout) {\n          case HORIZONTAL:\n            return `translate(${margin.left}, ${margin.top})`;\n          case VERTICAL:\n            return `translate(${margin.top}, ${margin.left})`;\n          case RADIAL:\n            return `translate(${Math.min(width / 2, height / 2)}, ${Math.min(\n              width / 2,\n              height / 2\n            )})`;\n        }\n      });\n\n      //Align leaves or not\n      let graphType = d3.tree();\n      isLeafNodesAlign ? (graphType = d3.cluster()) : (graphType = d3.tree());\n\n      //Gap between node\n      const separation = (a, b) => {\n        return (a.parent === b.parent ? 1 : 2) / isLeafNodesAlign ? 1 : a.depth;\n      };\n\n      //Setting the graph size for each layout\n      switch (layout) {\n        case HORIZONTAL:\n          graphType.size([\n            height - margin.top - margin.bottom,\n            width - margin.left - margin.right,\n          ]);\n          break;\n        case VERTICAL:\n          graphType.size([\n            width - margin.top - margin.bottom,\n            height - margin.left - margin.right,\n          ]);\n          break;\n        case RADIAL:\n          graphType\n            .size([2 * Math.PI, Math.min(width / 2, height / 2) - margin.right])\n            .separation(separation)(treeRoot);\n          break;\n      }\n\n      graphType(treeRoot);\n\n      //Start position of drawing\n      treeRoot.x0 = data[0].parent.x;\n      treeRoot.y0 = 0;\n\n      //Change values during vertical\n      if (layout === VERTICAL) {\n        treeDescendants.forEach((node) => {\n          const { x0, x, y0, y } = node;\n\n          node.x0 = y0;\n          node.x = y;\n          node.y0 = x0;\n          node.y = x;\n        });\n      }\n\n      //Setting the width of margin\n      const minY = [],\n        maxY = [],\n        minX = [],\n        maxX = [];\n\n      const circleRadius = [],\n        aligns = [],\n        depths = [];\n      treeDescendants.forEach((d) => {\n        circleRadius.push(nodeRadius(d.data[sizeKey]) || aveRadius);\n\n        const mapper = {\n          horizontal: {\n            alignmentDirection: margin.top + d.x,\n            depthDirection: margin.left + d.y,\n          },\n          vertical: {\n            alignmentDirection: margin.left + d.x,\n            depthDirection: margin.top + d.y,\n          },\n        };\n\n        switch (layout) {\n          case HORIZONTAL:\n            return (\n              aligns.push(mapper.horizontal[\"alignmentDirection\"]),\n              depths.push(mapper.horizontal[\"depthDirection\"])\n            );\n          case VERTICAL:\n            return (\n              aligns.push(mapper.vertical[\"alignmentDirection\"]),\n              depths.push(mapper.vertical[\"depthDirection\"])\n            );\n          default:\n            break;\n        }\n      });\n\n      //Get all positions\n      let deltas;\n      treeDescendants.forEach((d, i) => {\n        minX.push(aligns[i] - circleRadius[i]);\n        minY.push(depths[i] - circleRadius[i]);\n        maxX.push(aligns[i] + circleRadius[i]);\n        maxY.push(depths[i] + circleRadius[i]);\n      });\n\n      //Find each max/min value\n      switch (layout) {\n        case HORIZONTAL:\n          deltas = {\n            top: Math.min(...minX),\n            bottom: height - Math.max(...maxX),\n            left: Math.min(...minY),\n            right: width - Math.max(...maxY),\n          };\n          break;\n        case VERTICAL:\n          deltas = {\n            top: Math.min(...minY),\n            bottom: width - Math.max(...maxY),\n            left: Math.min(...minX),\n            right: height - Math.max(...maxX),\n          };\n          break;\n        default:\n          break;\n      }\n\n      // Update margin values\n      const directions = [\"top\", \"bottom\", \"right\", \"left\"];\n      switch (layout) {\n        case HORIZONTAL:\n        case VERTICAL:\n          for (const dir of directions) {\n            deltas[dir] < 0 ? (margin[dir] += Math.abs(deltas[dir]) + 1) : \"\";\n          }\n\n          //Redraw\n          if (\n            deltas.top < 0 ||\n            deltas.bottom < 0 ||\n            deltas.left < 0 ||\n            deltas.right < 0\n          ) {\n            draw(margin);\n          }\n          break;\n        default:\n          break;\n      }\n\n      //Update graph values\n      const update = (source) => {\n        let i = 0;\n\n        //Drawing circles\n        const nodeCirclesUpdate = gCircles\n          .selectAll(\"g\")\n          .data(treeRoot.descendants(), (d) => d.id || (d.id = ++i));\n\n        //Generate new elements of circle\n        const nodeCirclesEnter = nodeCirclesUpdate\n          .enter()\n          .append(\"g\")\n          .attr(\"transform\", () => {\n            switch (layout) {\n              case HORIZONTAL:\n              case VERTICAL:\n                return `translate(${source.y0}, ${source.x0})`;\n              case RADIAL:\n                return `rotate(${(source.x0 * 180) / Math.PI - 90}) translate(${\n                  source.y0\n                }, 0)`;\n            }\n          })\n          .on(\"click\", (e, d) => {\n            toggle(d);\n            update(d);\n          });\n\n        //Update circle color when opening and closing\n        nodeCirclesUpdate\n          .filter((d) => d === source)\n          .select(\"circle\")\n          .attr(\"fill\", (d) => (d._children ? \"#fff\" : setColor(d)));\n\n        //Decorate circle\n        nodeCirclesEnter\n          .append(\"circle\")\n          .attr(\"data-tooltip\", (d) => d.data[tooltipKey])\n          .attr(\"stroke\", setColor)\n          .style(colorModeProperty, colorModeValue)\n          .classed(\"with-children\", (d) => d.children)\n          .attr(\"r\", (d) =>\n            data.some((d) => d.data[sizeKey])\n              ? nodeRadius(d.data[sizeKey])\n              : parseFloat(aveRadius)\n          )\n          .attr(\"fill\", setColor);\n\n        //Drawing labels\n        const nodeLabelsUpdate = gLabels\n          .selectAll(\"g\")\n          .data(treeRoot.descendants(), (d) => d.id || (d.id = ++i));\n\n        //Generate new elements of Labels\n        const nodeLabelsEnter = nodeLabelsUpdate\n          .enter()\n          .append(\"g\")\n          .attr(\"transform\", () => {\n            switch (layout) {\n              case HORIZONTAL:\n              case VERTICAL:\n                return `translate(${source.y0}, ${source.x0})`;\n              case RADIAL:\n                return `rotate(${(source.x0 * 180) / Math.PI - 90}) translate(${\n                  source.y0\n                }, 0)`;\n            }\n          });\n\n        //Decorate labels\n        nodeLabelsEnter\n          .append(\"text\")\n          .attr(\"x\", (d) => {\n            switch (layout) {\n              case HORIZONTAL:\n                return d.children || d._children ? -labelMargin : labelMargin;\n              case VERTICAL:\n                return d.children || d._children ? labelMargin : -labelMargin;\n              case RADIAL:\n                return d.x < Math.PI === !d.children\n                  ? labelMargin\n                  : -labelMargin;\n            }\n          })\n          .attr(\"dy\", \"3\")\n          .attr(\"transform\", (d) => {\n            switch (layout) {\n              case HORIZONTAL:\n                return \"rotate(0)\";\n              case VERTICAL:\n                return \"rotate(-90)\";\n              case RADIAL:\n                return `rotate(${d.x >= Math.PI ? 180 : 0})`;\n            }\n          })\n          .attr(\"text-anchor\", (d) => {\n            switch (layout) {\n              case HORIZONTAL:\n                return d.children || d._children ? \"end\" : \"start\";\n              case VERTICAL:\n                return d.children || d._children ? \"start\" : \"end\";\n              case RADIAL:\n                return d.x < Math.PI === !d.children ? \"start\" : \"end\";\n            }\n          })\n          .text((d) => d.data[nodeKey] || \"\");\n\n        const duration = 500;\n\n        //Circle transition\n        nodeCirclesEnter\n          .transition()\n          .duration(duration)\n          .attr(\"transform\", (d) => {\n            switch (layout) {\n              case HORIZONTAL:\n              case VERTICAL:\n                return `translate(${d.y}, ${d.x})`;\n              case RADIAL:\n                return `rotate(${(d.x * 180) / Math.PI - 90}) translate(${\n                  d.y\n                }, 0)`;\n            }\n          });\n\n        //Labels transition\n        nodeLabelsEnter\n          .attr(\"transform\", (d) => {\n            switch (layout) {\n              case HORIZONTAL:\n              case VERTICAL:\n                return `translate(${source.y}, ${source.x})`;\n              case RADIAL:\n                if (source.y === 0) {\n                  return `rotate(${(d.x * 180) / Math.PI - 90}) translate(${\n                    source.y\n                  }, ${source.x})`;\n                } else {\n                  return `rotate(${\n                    (source.x * 180) / Math.PI - 90\n                  }) translate(${source.y}, ${source.x})`;\n                }\n            }\n          })\n          .transition()\n          .duration(duration)\n          .attr(\"transform\", (d) => {\n            switch (layout) {\n              case HORIZONTAL:\n              case VERTICAL:\n                return `translate(${d.y}, ${d.x})`;\n              case RADIAL:\n                return `rotate(${(d.x * 180) / Math.PI - 90}) translate(${\n                  d.y\n                }, 0)`;\n            }\n          });\n\n        //Remove extra elements of circle\n        nodeCirclesUpdate\n          .exit()\n          .transition()\n          .duration(duration)\n          .attr(\"transform\", () => {\n            switch (layout) {\n              case HORIZONTAL:\n              case VERTICAL:\n                return `translate(${source.y}, ${source.x})`;\n              case RADIAL:\n                return `rotate(${(source.x * 180) / Math.PI - 90}) translate(${\n                  source.y\n                }, 0)`;\n            }\n          })\n          .remove();\n\n        //Remove extra elements of Labels\n        nodeLabelsUpdate\n          .exit()\n          .attr(\"transform\", (d) => {\n            switch (layout) {\n              case HORIZONTAL:\n              case VERTICAL:\n                return `translate(${d.y}, ${d.x})`;\n              case RADIAL:\n                return `rotate(${(d.x * 180) / Math.PI - 90}) translate(${\n                  d.y\n                }, 0)`;\n            }\n          })\n          .transition()\n          .duration(duration)\n          .attr(\"transform\", (d) => {\n            switch (layout) {\n              case HORIZONTAL:\n              case VERTICAL:\n                return `translate(${source.y}, ${source.x})`;\n              case RADIAL:\n                if (source.y === 0) {\n                  return `rotate(${(d.x * 180) / Math.PI - 90}) translate(${\n                    source.y\n                  }, 0)`;\n                } else {\n                  return `rotate(${\n                    (source.x * 180) / Math.PI - 90\n                  }) translate(${source.y}, 0)`;\n                }\n            }\n          })\n          .remove();\n\n        //Drawing path\n        const link = g\n          .selectAll(\".link\")\n          .data(treeRoot.links(), (d) => d.target.id);\n\n        //Setting the path for each direction\n        const getLinkFn = () => {\n          switch (layout) {\n            case HORIZONTAL:\n              return d3.linkHorizontal();\n            case VERTICAL:\n              return d3.linkVertical();\n          }\n        };\n\n        //Generate new elements of Path\n        const linkEnter = link\n          .enter()\n          .insert(\"path\", \"g\")\n          .classed(\"link\", true)\n          .attr(\n            \"d\",\n            layout === RADIAL\n              ? d3.linkRadial().angle(source.x).radius(source.y)\n              : getLinkFn().x(source.y0).y(source.x0)\n          );\n\n        //Path transition\n        const linkUpdate = linkEnter;\n        linkUpdate\n          .transition()\n          .duration(duration)\n          .attr(\n            \"d\",\n            layout === RADIAL\n              ? d3\n                  .linkRadial()\n                  .angle((d) => d.x)\n                  .radius((d) => d.y)\n              : getLinkFn()\n                  .x((d) => d.y)\n                  .y((d) => d.x)\n          );\n\n        //Remove extra elements of path\n        link\n          .exit()\n          .transition()\n          .duration(duration)\n          .attr(\n            \"d\",\n            layout === RADIAL\n              ? d3.linkRadial().angle(source.x).radius(source.y)\n              : getLinkFn().x(source.y).y(source.x)\n          )\n          .remove();\n\n        //Get current position for next action\n        nodeCirclesUpdate.each((d) => {\n          d.x0 = d.x;\n          d.y0 = d.y;\n        });\n      };\n      update(treeRoot);\n    };\n\n    //Drawing\n    draw();\n\n    if (showToolTips) {\n      this.tooltip.setup(el.querySelectorAll(\"[data-tooltip]\"));\n    }\n  }\n}\n"],"names":["d3\n      .stratify","d3.min","d3.max","d3\n      .scaleSqrt","d3\n      .scaleOrdinal","d3\n      .select","d3.tree","d3.cluster","d3.linkHorizontal","d3.linkVertical","d3.linkRadial","d3\n                  .linkRadial"],"mappings":"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"}